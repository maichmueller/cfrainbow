name: Python CI

on:
  pull_request:
    branches: '**'
  push:
    branches: '**'

jobs:
  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'macos-latest', 'ubuntu-20.04', 'ubuntu-18.04' ]
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Update pip
        run: |
          python -m pip install --upgrade pip
      - name: Install and run pre-commit
        uses: pre-commit/action@v2.0.0
        with:
          extra_args: --all-files

  test:
    needs:
      - lint
    strategy:
      fail-fast: true
      matrix:
        config:
          - python-version: 3.8
            tox: 38
          - python-version: 3.9
            tox: 39
          - python-version: '3.10'
            tox: 310
        os: [ 'macos-latest', 'ubuntu-20.04', 'ubuntu-18.04' ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up testing Python ${{ matrix.config.python-version }}
        uses: actions/setup-python@v2
        with:
          architecture: x64
      - name: Update pip
        run: |
          python -m pip install --upgrade pip
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-path: .venv
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: false
      - name: Load cached virtual env
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ matrix.os }}-python-${{ matrix.config.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Load cached tox
        id: cached-tox-dependencies
        uses: actions/cache@v3
        with:
          path: .tox
          key: tox-${{ matrix.os }}-python-${{ matrix.config.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        env:
          PATH: "$HOME/.poetry/bin:$PATH"
      - name: Run tox with coverage
        run: |
          poetry run tox -e py${{ matrix.config.tox }} -- -n auto --cov=.
        env:
          PATH: "$HOME/.poetry/bin:$PATH"
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        if: secrets.CODECOV_TOKEN
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          env_vars: OS,PY
